package com.fdilke.algebra.permutation

import com.fdilke.utility.RichFunSuite._
import munit.FunSuite

class CyclicGroupSpec extends FunSuite:
  test("The cyclic group makes sense only for a positive number of elements"):
    intercept[IllegalArgumentException] {
      CyclicGroup(0)
    }
    intercept[IllegalArgumentException] {
      CyclicGroup(-1)
    }

  test("CG has the right number of elements, and are groups"):
    val group6 = CyclicGroup(6)
    GroupVerifier.checkGroupOf[Int](group6)
    group6.order is 6

  test("is indeed generated by its alleged generator"):
    val group8 = CyclicGroup(8)
    group8.generateSubgroup(
      group8.generator
    ) is
      group8.wholeGroup
